package simulator.view;

import java.awt.Dimension;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.Map;

import javax.swing.BoxLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;
import javax.swing.JPanel;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

import org.json.JSONArray;
import org.json.JSONObject;

import simulator.control.Controller;
import simulator.model.BodiesGroup;
import simulator.model.Body;
import simulator.model.ForceLaws;
import simulator.model.SimulatorObserver;

public class ForceLawsDialog extends JDialog implements SimulatorObserver {
	
	private DefaultComboBoxModel<String> _lawsModel;
	private DefaultComboBoxModel<String> _groupsModel;
	private DefaultTableModel _dataTableModel;
	private Controller _ctrl;
	private List<JSONObject> _forceLawsInfo;
	private String[] _headers = { "Key", "Value", "Description" };
	
	private List<JSONObject> gruposDisp;
	private JPanel opciones;
	private JButton ok;
	
	private int fase = 0;
	
		ForceLawsDialog(Frame parent, Controller ctrl) {
		super(parent, true);
		_ctrl = ctrl;
		initGUI();
		_ctrl.addObserver(this);
		}
		
		private void initGUI() {
			
			setTitle("Force Laws Selection");
			
			JPanel mainPanel = new JPanel();
			mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));
			setContentPane(mainPanel);
			
			JLabel texto = new JLabel("Select a force law and provide values for the parameters in the Value column.");
			texto.setAlignmentX(CENTER_ALIGNMENT);
			mainPanel.add(texto);
			mainPanel.add(Box.createRigidArea(new Dimension(0, 10)));
			
			JPanel botones = new JPanel();
			botones.setAlignmentX(CENTER_ALIGNMENT);
			mainPanel.add(botones);
			
			_forceLawsInfo = _ctrl.getForceLawsInfo();
			
			// tabla
			
			_dataTableModel = new DefaultTableModel() {
				
				@Override
				public boolean isCellEditable(int row, int column) {
					return column == 1;
				}
			};

			_dataTableModel.setColumnIdentifiers(_headers);
			JTable t = new JTable(_dataTableModel);
			t.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			t.setFillsViewportHeight(true);
			JScrollPane scrollPane = new JScrollPane(t);
			mainPanel.add(scrollPane);
			
			
			// force laws
			JLabel textoLaws =new JLabel("Force Law: ", JLabel.CENTER);
			_lawsModel = new DefaultComboBoxModel<>();
			for (JSONObject info : _forceLawsInfo) {
			    String desc = info.getString("desc");
			    _lawsModel.addElement(desc);
			}
			JComboBox<String> lawsComboBox = new JComboBox<String>(_lawsModel);
			lawsComboBox.setVisible(true);
			botones.add(textoLaws);
			botones.add(lawsComboBox);

			// groups
			JLabel textoGroups =new JLabel("Group: ", JLabel.CENTER);
			_groupsModel = new DefaultComboBoxModel<>();
			
			JComboBox<String> groupsComboBox = new JComboBox<String>(_groupsModel);
			groupsComboBox.setVisible(true);
			botones.add(textoGroups);
			botones.add(groupsComboBox);
			
			// opciones OK y cancel
			
			opciones = new JPanel();
			opciones.setAlignmentX(CENTER_ALIGNMENT);
			mainPanel.add(opciones);
			
			ok = new JButton("OK");
			ok.addActionListener(new ActionListener() {
			
				@Override
				public void actionPerformed(ActionEvent arg0) {
					// TODO Auto-generated method stub
					
					if(_lawsModel.getSelectedItem()!= null) {
						if(_groupsModel.getSelectedItem()!= null) {
							
							fase = 1;
							ForceLawsDialog.this.setVisible(false);
						}
					}
				}	
				
			});
			opciones.add(ok);
			
			JButton cancel = new JButton("Cancel");
			cancel.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent e) {
					fase = 0;
					ForceLawsDialog.this.setVisible(false);	
				}
			});
			opciones.add(cancel);

			setPreferredSize(new Dimension(700, 400));
			pack();
			setResizable(false);
			setVisible(false);
		}
		
		public void open() {
			
			if (_groupsModel.getSize() == 0)
				return;
			
			setLocationRelativeTo(getParent());
			
			pack();
			setVisible(true);
			//return _status;
		}

		@Override
		public void onAdvance(Map<String, BodiesGroup> groups, double time) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void onReset(Map<String, BodiesGroup> groups, double time, double dt) {
			
		}

		@Override
		public void onRegister(Map<String, BodiesGroup> groups, double time, double dt) {
			for(BodiesGroup g: groups.values()) {
				_groupsModel.addElement(g.getId());;
			}
		}

		@Override
		public void onGroupAdded(Map<String, BodiesGroup> groups, BodiesGroup g) {
			_groupsModel.addElement(g.getId());
		}

		@Override
		public void onBodyAdded(Map<String, BodiesGroup> groups, Body b) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void onDeltaTimeChanged(double dt) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void onForceLawsChanged(BodiesGroup g) {
			// TODO Auto-generated method stub
			
		}
	}
